package sqlsugg.selest;

import sqlsugg.backends.SQLBackend;
import sqlsugg.mapping.MapType;
import sqlsugg.mapping.maps.K2VMap;
import sqlsugg.sqlgen.MapIns;
import sqlsugg.template.tgraph.*;
import sqlsugg.template.*;
import sqlsugg.util.Op;
import sqlsugg.util.schemaGraph.*;
import sqlsugg.util.*;

import java.util.*;

public class OpTree {
	public class OpNode {
		public int type;
		public RTNode rnode;
		
		public String id;
		
		public OpNode left = null;
		public OpNode right = null;
		
		
		public OpNode (int pT, RTNode pR, String pId) {
			type = pT;
			rnode = pR;
			id = pId;
		}
		
		public String toString () {
			return type +" "+ rnode + "(" + id + ")";
		}
	}
	
	OpNode root;
	
	
	final String INVTABLE = "inv_index";
	
	SQLBackend sql;
	
	HashFamily hashes;
	int width;
	
	Map<String, MHBucketGen> table2Gen;
	
	public OpTree (Template template, RTNode rnode, SchemaGraph sg, 
			int pWidth, HashFamily pHashes, SQLBackend pSql, Map<String, MHBucketGen> pt2g) {
		Set<RTNode> visited = new HashSet<RTNode> ();
		String id = rnode.relation.getKey();
		root = constructOpTree (template, rnode, visited, id, sg);
		width = pWidth;
		hashes = pHashes;
		sql = pSql;
		table2Gen = pt2g;
	}
	
	public OpNode constructOpTree (Template template, 
			RTNode rnode, Set<RTNode> visited, String id, SchemaGraph sg) {
		if (visited.contains(rnode)) {
			return null;
		}
		visited.add(rnode);
		OpNode n1 = new OpNode (0, rnode, id);
		List<RTNode> adjs = template.getAdjacentRTNodes(rnode);
		if (adjs.size() == 0) {
			return n1;
		}
		OpNode root = n1;
		
		for (RTNode adj: adjs) {
			JoinEdge edge = sg.getJoinEdge(rnode.relation.getName(), adj.relation.getName());
			String ra, aa;
			if (edge.foreign.equals(rnode.relation.getName())) {
				ra = edge.foreignAtt;
				aa = edge.primaryAtt;
			} else {
				ra = edge.primaryAtt;
				aa = edge.foreignAtt;
			}
			OpNode n2 = constructOpTree (template, adj, visited, aa, sg);
			if (n2 != null) {
				OpNode joinNode = new OpNode (1, null, id);
				root.id = ra;
				joinNode.left = root;
				joinNode.right = n2;
				root = joinNode;
			}
		}
		return root;
	}
	
	public String toString () {
		StringBuffer buffer = new StringBuffer();
		doString (root, buffer, 0);
		return buffer.toString();
	}
	
	static void doString (OpNode root, StringBuffer buffer, int level) {
		if (root == null) {
			return;
		}
		for (int i = 0; i < level; i ++) {
			buffer.append("  ");
		}
		buffer.append(root);
		buffer.append("\n");
		doString (root.left, buffer, level + 1);
		doString (root.right, buffer, level + 1);
	}
	
	public int estimateCard (Collection<MapIns> matching, 
			Map<String, BiHistogram> bhists) throws Exception {
		List<MHIdBucket> buckets = doEstimateCard (root, matching, bhists);
		return MHBucketOps.cardinality(buckets);
	}
	
	public List<MHIdBucket> doEstimateCard (OpNode root, 
			Collection<MapIns> matching, Map<String, BiHistogram> bhists) throws Exception {
		List<MHIdBucket> buckets = null;
		if (root.type == 0) { // Construct the buckets
			for (MapIns mapIns : matching) {
				if (mapIns.rnode == root.rnode) {
					List<MHIdBucket> newBuckets = map2MHIdBuckets (mapIns);
					if (buckets == null) {
						buckets = newBuckets;
					} else {
						buckets = MHBucketOps.operation(buckets, newBuckets, MHBucketOps.INTERSECT);
						System.out.println ("Results of Intersect: ");
						for (MHIdBucket bucket : buckets) {
							System.out.println (bucket.lowerBound + "\t" + 
									bucket.upperBound + "\t" + 
									bucket.divNum + "\t" + 
									bucket.freq);
						}
					}
				}
			}
			if (buckets == null) {
				buckets = id2MHIdBuckets(root.rnode, root.id);
			}
			System.out.println("\t" + root + ": #Card:  " + 
					MHBucketOps.cardinality(buckets) + " , #Buckets: " + buckets.size());
		} else { // Do the join operation, and transform the ids.
			List<MHIdBucket> lBuckets = doEstimateCard (root.left, matching, bhists);
			List<MHIdBucket> rBuckets = doEstimateCard (root.right, matching, bhists);
			buckets = MHBucketOps.operation(lBuckets, rBuckets, MHBucketOps.JOIN);
			System.out.println("\t" + root + ": Joined Result: #Card: " + MHBucketOps.cardinality(buckets)+ " , #Buckets: " + buckets.size());
			String key1 = root.left.id  + "_" + root.id;
			String key2 = root.right.id + "_" + root.id;
			BiHistogram bhist = bhists.get(key1);
			if (bhist == null) {
				bhist = bhists.get(key2);
			}
			if (bhist != null) {
				buckets = bhist.transform(buckets);
				System.out.println(root + ": Transformed: " + MHBucketOps.cardinality(buckets)+ " , " + buckets.size());
			}
		}
		return buckets;
	}
	
	protected List<MHIdBucket> id2MHIdBuckets (RTNode rnode, String idName) throws Exception {
		System.out.print("Fetch buckets for id " + idName + " ...");
		List<MHIdBucket> buckets = null;
		MHBucketGen bucketGen = table2Gen.get(rnode.relation.getName());
		if (bucketGen == null) {
			bucketGen = new MHBucketGen (sql, rnode.relation.getName(), hashes);
			table2Gen.put(rnode.relation.getName(), bucketGen);
		}
		buckets = bucketGen.genEqIdBuckets(idName, 1000, MHBucketGen.EQ_WIDTH);
		return buckets;
	}
	
	protected List<MHIdBucket> map2MHIdBuckets (MapIns mapIns) throws Exception {
		if (mapIns.keywordMap.type != MapType.K2V) {
			return null;
		}
		List<MHIdBucket> buckets = null; 
		K2VMap k2vMap = (K2VMap)mapIns.keywordMap;
		if (k2vMap.op == Op.CONTAINS) {
			String idName = "rcdid";
			String value = k2vMap.value;
			String aname = "word";
			String keyword = value + "_" + 
				mapIns.rnode.relation.getName() + "." + 
				mapIns.anode.attribute.name + ".value";
			MHBucketGen bucketGen = table2Gen.get(INVTABLE);
			if (bucketGen == null) {
				bucketGen = new MHBucketGen (sql, INVTABLE, hashes);
				table2Gen.put(INVTABLE, bucketGen);
			}
			buckets = bucketGen.genEqIdBuckets(aname, keyword, idName, 1000, MHBucketGen.EQ_WIDTH);
			return buckets;
		} else {
			//TODO: Fix here later. 
			return null;
		}
	}
}
