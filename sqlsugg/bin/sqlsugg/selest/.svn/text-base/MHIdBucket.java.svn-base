package sqlsugg.selest;

import sqlsugg.selest.sigs.*;
import sqlsugg.util.*;

import java.util.*;

public class MHIdBucket implements Comparable<Object>{
	int lowerBound;
	int upperBound;
	
	double freq;
	TreeSet<Integer> div;
	double divNum;
	
	MHBucketSig sigGen;
	
	
	public MHIdBucket (int pL, int pU, HashFamily pHashes) {
		lowerBound = pL;
		upperBound = pU;
		freq = 0;
		div = new TreeSet<Integer>();
		sigGen = new MHBucketSig (pHashes);
	}
	
	public MHIdBucket (int pL, int pU, double pDiv, 
			double pF) {
		lowerBound = pL;
		upperBound = pU;
		freq = pF;
		divNum = pDiv;
		
	}
	
	public void setSignature (int sig[]) {
		sigGen = new MHBucketSig (sig);
	}
	
	public void addId (int id) {
		freq ++;
		div.add(id);
		
		sigGen.updateSignature(id);
	}
	
	public void finalize () {
		divNum = div.size();
		div.clear();
		div = null;
	}
	
	/*
	 * We do NOT consider the case that one bucket contains another one.
	 */
	public int compareTo(Object obj) {
		MHIdBucket ivb = (MHIdBucket) obj;
		if (lowerBound > ivb.lowerBound) {
			return 1;
		} else if (lowerBound < ivb.lowerBound) {
			return -1;
		} else {
			return 0;
		}
	}
	
	public boolean equals (Object obj) {
		if (obj instanceof MHIdBucket) {
			MHIdBucket bucket = (MHIdBucket) obj;
			return lowerBound == bucket.lowerBound && 
				upperBound == bucket.upperBound;
		} else {
			return false;
		}
	}
	
	public int hashCode () {
		return new Integer (lowerBound).hashCode();
	}
	
	public boolean hasOverlap (Object obj) {
		MHIdBucket ivb = (MHIdBucket) obj;
		if (upperBound > ivb.lowerBound && 
				lowerBound < ivb.upperBound) {
			return true;
		} else {
			return false;
		}
	}
	
	public static List<MHIdBucket> matchFuzzyBuckets (MHIdBucket item, List<MHIdBucket> buckets) {
		if (item.compareTo(buckets.get(0)) == -1) {
			return null;
		} 
		if (item.compareTo(buckets.get(buckets.size() - 1)) == 1) {
			return null;
		}
		List<MHIdBucket> retBuckets = new LinkedList<MHIdBucket> ();
		for (MHIdBucket bucket : buckets) {
			if (bucket.hasOverlap(item)) {
				retBuckets.add(bucket);
			}
		}
		return retBuckets;
	}
	
	
	public static MHIdBucket matchExactBucket (MHIdBucket item, List<MHIdBucket> buckets) {
		if (item.compareTo(buckets.get(0)) == -1) {
			return null;
		} 
		if (item.compareTo(buckets.get(buckets.size() - 1)) == 1) {
			return null;
		}
		int start = 0;
		int end = buckets.size() - 1;
		while (start <= end) {
			int middle = (start + end) / 2;
			MHIdBucket mBucket = buckets.get(middle);
			if (item.compareTo(mBucket) == -1) {
				end = middle - 1;
			} else if (item.compareTo(mBucket) == 1) {
				start = middle + 1;
			} else {
				return mBucket;
			}
		}
		return null;
	}
	
	public static String metaDataDefine () {
		String stat = "(word varchar(100), bid int , lb int , ub int , " +
				"freq double , dn double, sig text)";
		return stat;
	}
	
	public static String insertStat (String tableName) {
		String stat = "INSERT INTO " + tableName + 
			"(word, lb, ub, freq, dn, sig) VALUES ";
		return stat;
	}
	
	public String toString () {
		return tupleStr (null);
	}
	
	public String tupleStr (String word) {
		String stat = "(";
		stat += "'" + word + "'" + ",";
		stat += lowerBound + ",";
		stat += upperBound + ",";
		stat += freq + ",";
		stat += divNum + ",";
		stat += "'" + sigGen.getSigStr() + "'";
		stat += ")";
		return stat;
	}
	
//	public static List<MHIdBucket> matchFuzzyBuckets (MHIdBucket item, List<MHIdBucket> buckets) {
//		List<MHIdBucket> matched = new LinkedList<MHIdBucket> ();
//		for (MHIdBucket)
//	}
	
}
